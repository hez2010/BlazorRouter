@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@inject IComponentContext ComponentContext
@inject INavigationInterception NavigationInterception
@inject IUriHelper UriHelper
@implements IDisposable

<CascadingValue Value="@this" Name="SwitchInstance">
    @ChildContent
</CascadingValue>
<CascadingValue Value="@parameters" Name="RouteParameters">
    @currentFragment
</CascadingValue>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventHandler<RouteMatchedEventArgs> OnMatch { get; set; }

    private readonly RouteTable routes = new RouteTable();
    private bool navigationInterceptionEnabled;
    private string location = "";
    private string baseUri = "";
    private RenderFragment currentFragment;
    private IDictionary<string, object> parameters;

    static readonly char[] queryOrHashStartChar = new[] { '?', '#' };

    private async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        this.location = e.Location;

        await SwitchContent(e.IsNavigationIntercepted);
    }

    private string StringUntilAny(string str, char[] chars)
    {
        var firstIndex = str.IndexOfAny(chars);
        return firstIndex < 0 ? str : str.Substring(0, firstIndex);
    }

    private Task SwitchContent(bool isNavigationIntercepted)
    {
        var path = UriHelper.ToBaseRelativePath(this.baseUri, this.location);
        path = "/" + StringUntilAny(path, queryOrHashStartChar);

        var context = new RouteContext(path);
        routes.Route(context);

        if (context.Fragment != null)
        {
            currentFragment = context.Fragment;
            parameters = context.Parameters;
            OnMatch?.Invoke(this, new RouteMatchedEventArgs(this.location, context.TemplateText, context.Parameters, context.Fragment));

            this.StateHasChanged();
        }
        else
        {
            if (isNavigationIntercepted)
            {
                UriHelper.NavigateTo(this.location, forceLoad: true);
            }
        }

        return Task.CompletedTask;
    }

    protected override Task OnInitAsync()
    {
        this.baseUri = UriHelper.GetBaseUri();
        this.location = UriHelper.GetAbsoluteUri();
        UriHelper.OnLocationChanged += LocationChanged;
        return Task.CompletedTask;
    }

    public Task RegisterRoute(RenderFragment fragment, string template)
    {
        routes.Add(template, fragment);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (!this.navigationInterceptionEnabled && ComponentContext.IsConnected)
        {
            this.navigationInterceptionEnabled = true;
            await SwitchContent(false);
            await NavigationInterception.EnableNavigationInterceptionAsync();
        }
    }

    public void Dispose()
    {
        UriHelper.OnLocationChanged -= LocationChanged;
    }
}